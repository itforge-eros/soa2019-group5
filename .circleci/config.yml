version: 2
jobs:
  search:
    working_directory: ~/soa2019-group5/search-service
    docker:
      - image: google/cloud-sdk
    environment:
      SBT_VERSION: 1.2.8
    steps:
      - checkout:
          path: ~/soa2019-group5
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Get sbt binary and openjdk8
          command: |
            apt update && apt install -y curl openjdk-8-jdk
            curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb
            dpkg -i sbt-$SBT_VERSION.deb
            rm sbt-$SBT_VERSION.deb
            apt-get update
            apt-get install -y sbt git
            apt-get clean && apt-get autoclean
      - run:
          name: Config gcloud credentials
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud auth configure-docker
      - restore_cache:
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
          - search-{{ checksum "build.sbt" }}
          # fallback to using the latest cache if no exact match is found
          - search-
      - run:
          name: Compile samplescala dist package
          command: sbt clean update assembly
      - run:
          name: Change aritfact directory
          command: mv target/scala*/search-service-assembly*.jar app.jar
      - save_cache:
          key: search-{{ checksum "build.sbt" }}
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
      - run:
          name: Build and Push docker image to asia.gcr.io
          command: |
            docker build -t asia.gcr.io/kavinvin-211411/search-service:${CIRCLE_SHA1} .
            docker push asia.gcr.io/kavinvin-211411/search-service:${CIRCLE_SHA1}
  frontend-build:
    working_directory: ~/soa2019-group5/lectio-pwa
    docker:
      - image: circleci/node:10
    steps:
      - checkout:
          path: ~/soa2019-group5
      - setup_remote_docker:
          docker_layer_caching: true
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run: mkdir workspace
      - run: npm install
      - run: npm run build
      - run: mv build workspace/
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: workspace
          # Must be relative path from root
          paths:
            - build
  frontend-deploy:
    working_directory: ~/soa2019-group5/lectio-pwa
    docker:
      - image: google/cloud-sdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout:
          path: ~/soa2019-group5
      - run:
          name: Config gcloud credentials
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud auth configure-docker
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./workspace
      - run:
          name: Build and Push docker image to asia.gcr.io
          command: |
            mv workspace/build .
            docker build -t asia.gcr.io/kavinvin-211411/lectio-pwa:${CIRCLE_SHA1} .
            docker push asia.gcr.io/kavinvin-211411/lectio-pwa:${CIRCLE_SHA1}
  memo-deploy:
    working_directory: ~/soa2019-group5/memo-service
    docker:
      - image: google/cloud-sdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout:
          path: ~/soa2019-group5
      - run:
          name: Config gcloud credentials
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud auth configure-docker
      - run:
          name: Build and Push docker image to asia.gcr.io
          command: |
            docker build -t asia.gcr.io/${GCLOUD_PROJECT_ID}/memo-service:${CIRCLE_SHA1} .
            docker push asia.gcr.io/${GCLOUD_PROJECT_ID}/memo-service:${CIRCLE_SHA1}
  deploy_kubernetes:
    docker:
      - image: google/cloud-sdk
    environment:
      GCLOUD_CLUSTER_NAME: lectio
    steps:
      - run:
          name: Config gcloud credentials
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
      - run:
          name: Build and Push docker image to asia.gcr.io
          command: |
            gcloud --quiet container clusters get-credentials ${GCLOUD_CLUSTER_NAME} --zone asia-southeast1-a
            kubectl set image -n default deployment memo memo=asia.gcr.io/${GCLOUD_PROJECT_ID}/memo-service:${CIRCLE_SHA1}
            kubectl set image -n default deployment search search=asia.gcr.io/${GCLOUD_PROJECT_ID}/search-service:${CIRCLE_SHA1}
            kubectl set image -n default deployment frontend frontend=asia.gcr.io/${GCLOUD_PROJECT_ID}/lectio-pwa:${CIRCLE_SHA1}
workflows:
  version: 2
  deploy:
    jobs:
      - search:
          filters:
            branches:
              only:
                - master
      - memo-deploy:
          filters:
            branches:
              only:
                - master
      - frontend-build:
          filters:
            branches:
              only:
                - master
      - frontend-deploy:
          requires:
            - frontend-build
          filters:
            branches:
              only:
                - master
      - deploy_kubernetes:
          requires:
            - memo-deploy
            - frontend-deploy
            - search
